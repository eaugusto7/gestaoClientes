definitions:
  httputil.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  models.Atendente:
    properties:
      celular:
        type: string
      id:
        type: integer
      idquadrohorario:
        type: integer
      nome:
        type: string
    type: object
  models.Atendimento:
    properties:
      formapagamento:
        type: string
      horario:
        type: number
      id:
        type: integer
      idatendente:
        type: integer
      idcliente:
        type: integer
      idservico:
        type: integer
      nome:
        type: string
      status:
        type: string
      statusfixo:
        type: boolean
    type: object
  models.Cliente:
    properties:
      celular:
        type: string
      celular2:
        type: string
      cpf:
        type: string
      datanascimento:
        type: string
      email:
        type: string
      id:
        type: integer
      nome:
        type: string
      profissao:
        type: string
      rg:
        maxLength: 13
        type: string
      sexo:
        type: string
    type: object
  models.Login:
    properties:
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  models.Produtos:
    properties:
      descricao:
        type: string
      fabricante:
        type: string
      id:
        type: integer
      nome:
        type: string
      quantidade:
        type: integer
      valorcusto:
        type: number
      valorvenda:
        type: number
    type: object
  models.Quadroshorarios:
    properties:
      domingo:
        items:
          type: integer
        type: array
      id:
        type: integer
      quarta:
        items:
          type: integer
        type: array
      quinta:
        items:
          type: integer
        type: array
      sabado:
        items:
          type: integer
        type: array
      segunda:
        items:
          type: integer
        type: array
      sexta:
        items:
          type: integer
        type: array
      terca:
        items:
          type: integer
        type: array
    type: object
  models.Servico:
    properties:
      id:
        type: integer
      nome:
        type: string
      tempo:
        type: number
      valor:
        type: number
    type: object
info:
  contact: {}
paths:
  /api/v1/atendentes:
    get:
      description: Obtem todos os atendentes vindos do banco de dados
      produces:
      - application/json
      responses: {}
      summary: Todos Atendentes
      tags:
      - Atendentes
    post:
      consumes:
      - application/json
      description: Cria um novo atendente no banco de dados
      parameters:
      - description: Json Atendente
        in: body
        name: atendente
        required: true
        schema:
          $ref: '#/definitions/models.Atendente'
      produces:
      - application/json
      responses:
        "404":
          description: 'Erro: Atendente não cadastrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Insere Atendente
      tags:
      - Atendentes
  /api/v1/atendentes/{id}:
    delete:
      description: Remove o atendente indicado pelo id no banco de dados
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Não encontrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Deleta Atendente
      tags:
      - Atendentes
    get:
      description: Obtem  o json de um determinado atendente, filtrado por id
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Atendente não encontrado
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Busca Atendente por Id
      tags:
      - Atendentes
    patch:
      consumes:
      - application/json
      description: Atualiza as informações de um determinado atendente no banco de
        dados
      parameters:
      - description: Json Atendente
        in: body
        name: atendente
        required: true
        schema:
          $ref: '#/definitions/models.Atendente'
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Atendente não existe'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Atualiza Atendente
      tags:
      - Atendentes
  /api/v1/atendimentos:
    get:
      description: Obtem todos os atendimentos vindos do banco de dados
      produces:
      - application/json
      responses: {}
      summary: Todos Atendimentos
      tags:
      - Atendimentos
    post:
      consumes:
      - application/json
      description: Cria um novo atendimento no banco de dados
      parameters:
      - description: Json Atendimento
        in: body
        name: atendimento
        required: true
        schema:
          $ref: '#/definitions/models.Atendimento'
      produces:
      - application/json
      responses:
        "404":
          description: 'Erro: Atendimento não cadastrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Insere Atendimento
      tags:
      - Atendimentos
  /api/v1/atendimentos/{id}:
    delete:
      description: Remove o atendente indicado pelo id no banco de dados
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Não encontrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Deleta Atendimento
      tags:
      - Atendimentos
    get:
      description: Obtem  o json de um determinado atendimento, filtrado por id
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Atendimento não encontrado
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Busca Atendimento por Id
      tags:
      - Atendimentos
    patch:
      consumes:
      - application/json
      description: Atualiza as informações de um determinado atendimento no banco
        de dados
      parameters:
      - description: Json Atendimento
        in: body
        name: atendimento
        required: true
        schema:
          $ref: '#/definitions/models.Atendimento'
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Atendimento não existe'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Atualiza Atendimento
      tags:
      - Atendimentos
  /api/v1/atendimentos/atendentes/{idatendente}:
    get:
      description: Obtem  o json de um determinado atendimento, filtrado por idAtendente
      parameters:
      - description: IdAtendente
        in: path
        name: idatendente
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Atendimento não encontrado
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Busca Atendimento por Id Atendente
      tags:
      - Atendimentos
  /api/v1/atendimentos/clientes/{idcliente}:
    get:
      description: Obtem  o json de um determinado atendimento, filtrado por idCliente
      parameters:
      - description: IdCliente
        in: path
        name: idcliente
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Atendimento não encontrado
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Busca Atendimento por Id Cliente
      tags:
      - Atendimentos
  /api/v1/atendimentos/servicos/{idservico}:
    get:
      description: Obtem  o json de um determinado atendimento, filtrado por idServico
      parameters:
      - description: IdServico
        in: path
        name: idservico
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Atendimento não encontrado
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Busca Atendimento por Id Servioc
      tags:
      - Atendimentos
  /api/v1/clientes:
    get:
      description: Obtem todos os clientes vindos do banco de dados
      produces:
      - application/json
      responses: {}
      summary: Todos Clientes
      tags:
      - Clientes
    post:
      consumes:
      - application/json
      description: Cria um novo cliente no banco de dados
      parameters:
      - description: Json Cliente
        in: body
        name: cliente
        required: true
        schema:
          $ref: '#/definitions/models.Cliente'
      produces:
      - application/json
      responses:
        "404":
          description: 'Erro: Cliente não cadastrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Insere Cliente
      tags:
      - Clientes
  /api/v1/clientes/{id}:
    delete:
      description: Remove o cliente indicado pelo id no banco de dados
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Não encontrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Deleta Cliente
      tags:
      - Clientes
    get:
      description: Obtem  o json de um determinado cliente, filtrado por id
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Cliente não encontrado
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Busca Cliente por Id
      tags:
      - Clientes
    patch:
      consumes:
      - application/json
      description: Atualiza as informações de um determinado cliente no banco de dados
      parameters:
      - description: Json Cliente
        in: body
        name: cliente
        required: true
        schema:
          $ref: '#/definitions/models.Cliente'
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Cliente não existe'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Atualiza Cliente
      tags:
      - Clientes
  /api/v1/clientes/nome/{nome}:
    get:
      description: Obtem  o json de um determinado cliente, filtrado por nome
      parameters:
      - description: Nome
        in: path
        name: nome
        required: true
        type: string
      produces:
      - application/json
      responses:
        "404":
          description: Cliente não encontrado
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Busca Cliente por Nome
      tags:
      - Clientes
  /api/v1/horarios:
    get:
      description: Obtem todos os quadros de horários vindos do banco de dados
      produces:
      - application/json
      responses: {}
      summary: Todos Quadros de Horários
      tags:
      - Quadro de Horários
    post:
      consumes:
      - application/json
      description: Cria um novo quadro de horários no banco de dados
      parameters:
      - description: Json Quadroshorario
        in: body
        name: atendente
        required: true
        schema:
          $ref: '#/definitions/models.Quadroshorarios'
      produces:
      - application/json
      responses:
        "404":
          description: 'Erro: Quadro de horários não cadastrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Insere Quadro de Horários
      tags:
      - Quadro de Horários
  /api/v1/horarios/{id}:
    delete:
      description: Remove o quadro de horário indicado pelo id no banco de dados
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Não encontrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Deleta Quadro de Horários
      tags:
      - Quadro de Horários
    get:
      description: Obtem  o json de um determinado quadro de horários, filtrado por
        id
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Quadro de horários não encontrado
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Busca Horario por Id
      tags:
      - Quadro de Horários
    patch:
      consumes:
      - application/json
      description: Atualiza as informações de um determinado quadro de horários no
        banco de dados
      parameters:
      - description: Json Quadro de Horarios
        in: body
        name: produto
        required: true
        schema:
          $ref: '#/definitions/models.Quadroshorarios'
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Quadro de horários não existe'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Atualiza Quadro de Horário
      tags:
      - Quadro de Horários
  /api/v1/login:
    get:
      description: Obtem todos os logins vindos do banco de dados
      produces:
      - application/json
      responses: {}
      summary: Todos Usuários
      tags:
      - Logins
    post:
      consumes:
      - application/json
      description: Cria um novo login no banco de dados
      parameters:
      - description: Json Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "404":
          description: 'Erro: Login não cadastrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Insere Login
      tags:
      - Logins
  /api/v1/login/:
    post:
      consumes:
      - application/json
      description: Obtem o json de um determinado login, filtrado por username
      parameters:
      - description: Json Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "404":
          description: 'Erro: Login não encontrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Busca Usuário
      tags:
      - Logins
  /api/v1/login/{id}:
    delete:
      description: Remove o login indicado pelo id no banco de dados
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Não encontrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Deleta Login
      tags:
      - Logins
    patch:
      consumes:
      - application/json
      description: Atualiza as informações de um determinado login no banco de dados
      parameters:
      - description: Json Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Login não existe'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Atualiza Login
      tags:
      - Logins
  /api/v1/produtos:
    get:
      description: Obtem todos os produtos vindos do banco de dados
      produces:
      - application/json
      responses: {}
      summary: Todos Produtos
      tags:
      - Produtos
    post:
      consumes:
      - application/json
      description: Cria um novo produto no banco de dados
      parameters:
      - description: Json Produto
        in: body
        name: produto
        required: true
        schema:
          $ref: '#/definitions/models.Produtos'
      produces:
      - application/json
      responses:
        "404":
          description: 'Erro: Produto não cadastrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Insere Produto
      tags:
      - Produtos
  /api/v1/produtos/{id}:
    delete:
      description: Remove o produto indicado pelo id no banco de dados
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Não encontrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Deleta Produto
      tags:
      - Produtos
    get:
      description: Obtem  o json de um determinado produto, filtrado por id
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Produto não encontrado
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Busca Produto por Id
      tags:
      - Produtos
    patch:
      consumes:
      - application/json
      description: Atualiza as informações de um determinado produto no banco de dados
      parameters:
      - description: Json Produto
        in: body
        name: produto
        required: true
        schema:
          $ref: '#/definitions/models.Produtos'
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Produto não existe'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Atualiza Produto
      tags:
      - Produtos
  /api/v1/servicos:
    get:
      description: Obtem todos os serviços vindos do banco de dados
      produces:
      - application/json
      responses: {}
      summary: Todos Serviços
      tags:
      - Serviços
    post:
      consumes:
      - application/json
      description: Cria um novo serviço no banco de dados
      parameters:
      - description: Json Serviço
        in: body
        name: servico
        required: true
        schema:
          $ref: '#/definitions/models.Servico'
      produces:
      - application/json
      responses:
        "404":
          description: 'Erro: Serviço não cadastrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Insere Serviço
      tags:
      - Serviços
  /api/v1/servicos/{id}:
    delete:
      description: Remove o serviço indicado pelo id no banco de dados
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Não encontrado'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Deleta Serviço
      tags:
      - Serviços
    get:
      description: Obtem  o json de um determinado serviço, filtrado por id
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Serviço não encontrado
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Busca Serviço por Id
      tags:
      - Serviços
    patch:
      consumes:
      - application/json
      description: Atualiza as informações de um determinado serviço no banco de dados
      parameters:
      - description: Json Serviços
        in: body
        name: produto
        required: true
        schema:
          $ref: '#/definitions/models.Servico'
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: 'Erro: Serviço não existe'
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Atualiza Serviço
      tags:
      - Serviços
swagger: "2.0"
